const c = (r) => new Promise((o, s) => {
  try {
    const e = document.createElement("script");
    e.type = "text/javascript", e.async = !0, e.src = r, e.addEventListener("load", () => {
      o("ok");
    }), e.addEventListener("error", () => {
      s(`Failed to load the script from ${r}`);
    }), document.body.appendChild(e);
  } catch (e) {
    s(e);
  }
}), p = (r) => import(
  r
  /* @vite-ignore */
), a = (r) => new Promise((o, s) => {
  try {
    const e = document.createElement("link");
    e.type = "text/css", e.href = r, e.rel = "stylesheet", e.addEventListener("load", () => {
      o("ok");
    }), e.addEventListener("error", () => {
      const l = new Error(`Failed to load the stylesheet from ${r}`);
      console.error(l), s(l);
    }), document.head.appendChild(e);
  } catch (e) {
    console.error(e), s(e);
  }
}), t = {
  umd: {
    prod: "https://app.smplrspace.com/lib/smplr.js",
    dev: "https://dev.smplrspace.com/lib/smplr.js",
    local: "http://localhost:3000/lib/smplr.umd.js"
  },
  esm: {
    prod: "https://app.smplrspace.com/lib/smplr.mjs",
    dev: "https://dev.smplrspace.com/lib/smplr.mjs",
    local: "http://localhost:3000/lib/smplr.mjs"
  },
  css: {
    prod: "https://app.smplrspace.com/lib/smplr.css",
    dev: "https://dev.smplrspace.com/lib/smplr.css",
    local: "http://localhost:3000/lib/style.css"
  }
};
async function d(r = "esm", o = "prod") {
  try {
    a(t.css[o]);
  } catch {
    console.warn("oops");
  }
  try {
    if (r === "esm") {
      const s = await p(t.esm[o]);
      return console.log("loaded esm", s), s;
    } else {
      await c(t.umd[o]);
      const s = window.smplr;
      if (!s)
        throw new Error("Failed to load smplr.js");
      return console.log("loaded umd", s), s;
    }
  } catch (s) {
    throw console.error(s), new Error("Failed to load smplr.js");
  }
}
export {
  d as loadSmplrJs
};
