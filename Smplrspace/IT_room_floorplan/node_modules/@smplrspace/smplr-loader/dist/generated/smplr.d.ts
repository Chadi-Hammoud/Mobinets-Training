import { Dispatch } from 'react';
import { Reducer } from 'react';
import { ReducerAction } from 'react';
import { Scene } from '@babylonjs/core';

declare type BaseData = {
    id?: string | number;
};

declare interface BaseDataLayer<T, D extends UnknownData> {
    tooltip?: (dataElement: T & D) => string;
    onClick?: (dataElement: T & D) => void;
    onHover?: (dataElement: T & D) => void;
    onHoverOut?: (dataElement: T & D) => void;
}

declare type CameraMode = '2d' | '3d'

declare interface ClientOptions {
    organizationId: string;
    clientToken: string;
}

declare type DataLayer<D extends UnknownData = NoData> = PointDataLayer<D> | IconDataLayer<D> | PolygonDataLayer<D> | PolylineDataLayer<D> | FurnitureDataLayer<D>;

declare class DataLayerController<D extends UnknownData> {
    private dataLayer;
    private scene;
    private dispatchDataLayersDefinition;
    private viewerRef;
    constructor(initOptions: DataLayerControllerInitOptions<D>);
    add(): void;
    update(dataLayerUpdates: Partial<DataLayer<D>>): void;
    remove(): void;
    getElementPositionOnScreen(elementId: string | number): ScreenXY | null;
}

declare interface DataLayerControllerInitOptions<D extends UnknownData> {
    dataLayer: DataLayer<D>;
    scene: SmplrScene;
    dispatchDataLayersDefinition: DispatchDataLayersDefinitionFn;
    viewerRef: any;
}

declare type DataLayersDefinitionActions<D extends UnknownData> = {
    type: 'add';
    layer: DataLayer<D>;
} | {
    type: 'update';
    layer: Partial<Omit<DataLayer<D>, 'type'>>;
} | {
    type: 'remove';
    layer: {
        id: string;
    };
};

declare type DataLayersDefinitionReducer<D extends UnknownData = UnknownData> = Reducer<DataLayersDefinitionState<D>, DataLayersDefinitionActions<D>>;

declare type DataLayersDefinitionState<D extends UnknownData> = Record<string, DataLayer<D>>;

declare interface DeprecatedPreviewProps {
    mode: CameraMode;
    onViewerReady: () => void;
    onError: () => void;
}

declare type DispatchDataLayersDefinitionFn = Dispatch<ReducerAction<DataLayersDefinitionReducer>>;

declare type EventHandler = () => void;

declare enum EventType {
    CameraStartedMoving = "CameraStartedMoving",
    CameraStoppedMoving = "CameraStoppedMoving"
}

declare interface Filter {
    background: {
        clearColor: string;
    };
    directionalLight: {
        distance: number;
        intensity: number;
    };
    hemisphericLight: {
        diffuseColor: string;
        specularColor: string;
        groundColor: string;
        intensity: number;
    };
    whiteMaterial: {
        baseColor: string;
        metallicRatio: number;
        roughnessRatio: number;
        alphaRatio: number;
    };
    indoorMaterial: {
        baseColor: string;
        metallicRatio: number;
        roughnessRatio: number;
        alphaRatio: number;
    };
    grassMaterial: {
        baseColor: string;
        metallicRatio: number;
        roughnessRatio: number;
        alphaRatio: number;
    };
    waterMaterial: {
        baseColor: string;
        metallicRatio: number;
        roughnessRatio: number;
        alphaRatio: number;
    };
    darkGreyMaterial: {
        baseColor: string;
        metallicRatio: number;
        roughnessRatio: number;
        alphaRatio: number;
    };
    glassMaterial: {
        baseColor: string;
        metallicRatio: number;
        roughnessRatio: number;
        alphaRatio: number;
    };
    metalMaterial: {
        baseColor: string;
        metallicRatio: number;
        roughnessRatio: number;
        alphaRatio: number;
    };
    compassMaterial: {
        baseColor: string;
        metallicRatio: number;
        roughnessRatio: number;
        alphaRatio: number;
    };
    placeholderMaterial: {
        baseColor: string;
        metallicRatio: number;
        roughnessRatio: number;
        alphaRatio: number;
    };
    hoveredMaterial: {
        baseColor: string;
        metallicRatio: number;
        roughnessRatio: number;
        alphaRatio: number;
    };
    selectedMaterial: {
        baseColor: string;
        metallicRatio: number;
        roughnessRatio: number;
        alphaRatio: number;
    };
    dataElement: {
        defaultColor: string;
    };
}

declare type FurnitureData = BaseData & {
    furnitureId: string | string[];
};

declare interface FurnitureDataLayer<D extends UnknownData = NoData> extends BaseDataLayer<FurnitureData, D> {
    id: string;
    type: 'furniture';
    data: (FurnitureData & D)[];
    color?: string | ((dataElement: FurnitureData & D) => string);
}

declare type IconData = BaseData & {
    position: SmplrCoord3d;
};

declare interface IconDataLayer<D extends UnknownData = NoData> extends BaseDataLayer<IconData, D> {
    id: string;
    type: 'icon';
    data: (IconData & D)[];
    icon: {
        url: string;
        width: number;
        height: number;
    };
    width?: number | ((dataElement: IconData & D) => number);
    onDrag?: (dragged: {
        data: IconData & D;
    }) => void;
    onDrop?: (dropped: {
        data: IconData & D;
        position: SmplrCoord3d;
    }) => void;
}

declare type NoData = Record<string, never>;

declare type OnPickFn = (args: { coordinates: SmplrCoord3d; furnitureId?: string }) => void

declare interface OrbitCameraPlacement {
    alpha: number;
    beta: number;
    radius: number;
    target: Vector3Coord;
}

declare type PointData = BaseData & {
    position: SmplrCoord3d;
};

declare interface PointDataLayer<D extends UnknownData = NoData> extends BaseDataLayer<PointData, D> {
    id: string;
    type: 'point';
    data: (PointData & D)[];
    diameter?: number | ((dataElement: PointData & D) => number);
    anchor?: 'bottom' | 'center' | 'top';
    color?: string | ((dataElement: PointData & D) => string);
    alpha?: number;
    onDrag?: (dragged: {
        data: PointData & D;
    }) => void;
    onDrop?: (dropped: {
        data: PointData & D;
        position: SmplrCoord3d;
    }) => void;
}

declare type PolygonData = BaseData & {
    coordinates: SmplrCoord2d[];
};

declare interface PolygonDataLayer<D extends UnknownData = NoData> extends BaseDataLayer<PolygonData, D> {
    id: string;
    type: 'polygon';
    data: (PolygonData & D)[];
    baseHeight?: number | ((dataElement: PolygonData & D) => number);
    height?: number | ((dataElement: PolygonData & D) => number);
    color?: string | ((dataElement: PolygonData & D) => string);
    alpha?: number;
    onDrag?: (dragged: {
        data: PolygonData & D;
    }) => void;
    onDrop?: (dropped: {
        data: PolygonData & D;
        coordinates: SmplrCoord2d[];
    }) => void;
    disableReshape?: boolean;
    reshapeBoxColor?: string;
}

declare type PolylineData = BaseData & {
    coordinates: SmplrCoord3d[];
};

declare interface PolylineDataLayer<D extends UnknownData = NoData> extends BaseDataLayer<PolylineData, D> {
    id: string;
    type: 'polyline';
    data: (PolylineData & D)[];
    shape?: 'circle' | 'triangle' | 'square' | 'pentagon' | 'hexagon' | [number, number][];
    cap?: boolean;
    scale?: number | ((scaled: {
        data: PolylineData & D;
        stepIndex: number;
        distance: number;
    }) => number);
    stepSize?: number;
    color?: string | ((dataElement: PolylineData & D) => string);
    alpha?: number;
    onDrag?: (dragged: {
        data: PolylineData & D;
    }) => void;
    onDrop?: (dropped: {
        data: PolylineData & D;
        coordinates: SmplrCoord3d[];
    }) => void;
    disableReshape?: boolean;
    reshapeBoxColor?: string;
}

export declare class QueryClient {
    private options;
    private client;
    constructor(options: ClientOptions);
    private checkOptions;
    checkApiConnection(): Promise<string>;
    getApiVersion(): Promise<string>;
    getSpace(id: string): Promise<{
        status: string;
        name: string;
        id: string;
        assetmap?: {} | null | undefined;
        created_at: string;
        modified_at: string;
        definition?: {} | null | undefined;
        embed_image?: string | null | undefined;
        short_code?: string | null | undefined;
        public_link_enabled: boolean;
    }>;
}

declare interface RenderOptions {
    compass?: boolean
    annotations?: boolean
    skybox?: boolean
    backgroundColor?: string
    filter?: Partial<Filter>
    walls?: {
        render?: boolean
        alpha?: number
        maxHeightCm?: number
        showStructuralWalls?: boolean
    }
    doors?: boolean
    windows?: boolean
    flip?: boolean
    objects?: boolean
    floorplan?: {
        render?: boolean
        alpha?: number
        elevationInCm?: number
    }
}

declare interface ScreenXY {
    screenX: number;
    screenY: number;
}

declare interface SmplrCoord2d {
    levelIndex: number;
    x: number;
    z: number;
}

declare interface SmplrCoord3d extends SmplrCoord2d {
    elevation: number;
}

declare interface SmplrRenderLoop {
    enabled: boolean;
    pendingChanges: Record<number, string>;
    timePaddingMs: number;
    enable: () => void;
    addPendingChange: (name: string) => number;
    removePendingChange: (id: number) => void;
    hasPendingChanges: () => boolean;
}

declare interface SmplrScene extends Scene {
    _smplr_renderLoop: SmplrRenderLoop;
    _smplr_interactive?: boolean;
    _smplr_baseHeightForLevel?: number[];
}

export declare class Space {
    private options;
    private viewerStarted;
    private scene;
    private container;
    private setPickHandler;
    private dispatchDataLayersDefinition;
    private dataLayerControllers;
    private viewerRef;
    constructor(options: SpaceOptions);
    private checkOptions;
    private prepareContainer;
    remove: () => void;
    preview({ mode, onViewerReady, onError }: DeprecatedPreviewProps): void;
    startViewer(options: ViewerOptions): void;
    addDataLayer<D extends UnknownData>(dataLayer: DataLayer<D>): DataLayerController<D>;
    getDataLayer<D extends UnknownData>(id: string): DataLayerController<D> | undefined;
    updateDataLayer<D extends UnknownData>(dataLayerUpdates: Partial<DataLayer<D>>): void;
    removeDataLayer(id: string): void;
    enablePickingMode({ onPick }: {
        onPick: OnPickFn;
    }): void;
    disablePickingMode(): void;
    getCameraPlacement(): OrbitCameraPlacement;
    setCameraPlacement(placement: OrbitCameraPlacement): void;
    addEventListener(event: EventType | keyof typeof EventType, handler: EventHandler): number;
    removeEventListener(listenerId: number): void;
    clearEventListeners(event: EventType | keyof typeof EventType): void;
    clearAllEventListeners(): void;
    getDefinition(): any;
    centerCamera(): void;
    zoomIn(): void;
    zoomOut(): void;
    showUpToLevel(levelIndex: number): void;
}

declare interface SpaceOptions {
    spaceId: string;
    clientToken: string;
    containerId: string;
    disableErrorReporting?: boolean;
    internal?: boolean;
}

declare type UnknownData = Record<string, unknown>;

declare interface Vector2Coord {
    x: number;
    y: number;
}

declare interface Vector3Coord extends Vector2Coord {
    z: number;
}

export declare const version = "2.8.4";

declare interface ViewerOptions {
    mode?: CameraMode;
    preview?: boolean;
    allowModeChange?: boolean;
    cameraPlacement?: OrbitCameraPlacement;
    disableCameraControls?: boolean;
    hideNavigationButtons?: boolean;
    compass?: boolean;
    annotations?: boolean;
    renderOptions?: RenderOptions;
    onReady?: () => void;
    onError?: (error: unknown) => void;
    onModeChange?: (mode: CameraMode) => void;
    loadingMessage?: string;
}

export { }
